// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.5
// source: internal/proto/hardwareinfo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HardwareInfo_SendHardwareInfo_FullMethodName = "/grpc.HardwareInfo/SendHardwareInfo"
)

// HardwareInfoClient is the client API for HardwareInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HardwareInfoClient interface {
	SendHardwareInfo(ctx context.Context, in *HardwareInfoRequest, opts ...grpc.CallOption) (*HardwareResponse, error)
}

type hardwareInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewHardwareInfoClient(cc grpc.ClientConnInterface) HardwareInfoClient {
	return &hardwareInfoClient{cc}
}

func (c *hardwareInfoClient) SendHardwareInfo(ctx context.Context, in *HardwareInfoRequest, opts ...grpc.CallOption) (*HardwareResponse, error) {
	out := new(HardwareResponse)
	err := c.cc.Invoke(ctx, HardwareInfo_SendHardwareInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HardwareInfoServer is the server API for HardwareInfo service.
// All implementations must embed UnimplementedHardwareInfoServer
// for forward compatibility
type HardwareInfoServer interface {
	SendHardwareInfo(context.Context, *HardwareInfoRequest) (*HardwareResponse, error)
	mustEmbedUnimplementedHardwareInfoServer()
}

// UnimplementedHardwareInfoServer must be embedded to have forward compatible implementations.
type UnimplementedHardwareInfoServer struct {
}

func (UnimplementedHardwareInfoServer) SendHardwareInfo(context.Context, *HardwareInfoRequest) (*HardwareResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendHardwareInfo not implemented")
}
func (UnimplementedHardwareInfoServer) mustEmbedUnimplementedHardwareInfoServer() {}

// UnsafeHardwareInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HardwareInfoServer will
// result in compilation errors.
type UnsafeHardwareInfoServer interface {
	mustEmbedUnimplementedHardwareInfoServer()
}

func RegisterHardwareInfoServer(s grpc.ServiceRegistrar, srv HardwareInfoServer) {
	s.RegisterService(&HardwareInfo_ServiceDesc, srv)
}

func _HardwareInfo_SendHardwareInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HardwareInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HardwareInfoServer).SendHardwareInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HardwareInfo_SendHardwareInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HardwareInfoServer).SendHardwareInfo(ctx, req.(*HardwareInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HardwareInfo_ServiceDesc is the grpc.ServiceDesc for HardwareInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HardwareInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.HardwareInfo",
	HandlerType: (*HardwareInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendHardwareInfo",
			Handler:    _HardwareInfo_SendHardwareInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/hardwareinfo.proto",
}
